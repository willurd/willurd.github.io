{"version":3,"sources":["components/Editor.js","components/Renderer.js","App.js","index.js"],"names":["Editor","text","onTextChange","inputRef","useRef","handleChange","useCallback","event","currentTarget","value","useEffect","current","focus","className","ref","placeholder","onChange","Renderer","contentRef","el","parts","split","filter","p","trim","hasChildNodes","removeChild","childNodes","forEach","part","partEl","document","createElement","classList","add","appendChild","startsWith","Error","katex","render","e","innerText","replace","App","useState","setText","parseUrl","window","location","href","query","id","localStorage","getItem","setItem","defaultSize","ReactDOM","getElementById"],"mappings":"6OAiCeA,EA3BA,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,aAChBC,EAAWC,mBACXC,EAAeC,uBACnB,SAAAC,GACEL,EAAaK,EAAMC,cAAcC,SAEnC,CAACP,IASH,OANAQ,qBAAU,WACJP,EAASQ,SACXR,EAASQ,QAAQC,UAElB,IAGD,yBAAKC,UAAU,UACb,8BACEC,IAAKX,EACLY,YAAY,uCACZN,MAAOR,EACPe,SAAUX,M,gBCgBHY,EAxCE,SAAC,GAAc,IAAZhB,EAAW,EAAXA,KACZiB,EAAad,mBAgCnB,OA9BAM,qBAAU,WAKR,IAJA,IAAMS,EAAKD,EAAWP,QAChBS,EAAQnB,EAAKoB,MAAM,QAAQC,QAAO,SAAAC,GAAC,OAAIA,EAAEC,UAGxCL,EAAGM,iBACRN,EAAGO,YAAYP,EAAGQ,WAAW,IAI/BP,EAAMQ,SAAQ,SAAAC,GACZ,IAAMC,EAASC,SAASC,cAAc,OACtCF,EAAOG,UAAUC,IAAI,QACrBf,EAAGgB,YAAYL,GAEf,IACE,GAAID,EAAKO,WAAW,KAClB,MAAM,IAAIC,MAGZC,IAAMC,OAAOV,EAAMC,GACnBA,EAAOG,UAAUC,IAAI,cACrB,MAAOM,GAEPV,EAAOW,UAAYZ,EAAKa,QAAQ,KAAM,IACtCZ,EAAOG,UAAUC,IAAI,mBAGxB,CAACjC,IAGF,yBAAKY,UAAU,YACb,yBAAKC,IAAKI,MCNDyB,EAxBH,WAAO,IAAD,EACQC,mBAAS,IADjB,mBACT3C,EADS,KACH4C,EADG,OAEHD,oBAAS,kBAAME,IAASC,OAAOC,SAASC,MAAM,GAAMC,MAAMC,MAAhEA,EAFS,oBAgBhB,OAZAzC,qBAAU,WACJyC,GACFN,EAAQO,aAAaC,QAAb,eAA6BF,KAAS,MAE/C,CAACA,IAEJzC,qBAAU,WACJyC,GACFC,aAAaE,QAAb,eAA6BH,GAAMlD,KAEpC,CAACkD,EAAIlD,IAGN,kBAAC,IAAD,CAAWoB,MAAM,WAAWkC,YAAY,OACtC,kBAAC,EAAD,CAAQtD,KAAMA,EAAMC,aAAc2C,IAClC,kBAAC,EAAD,CAAU5C,KAAMA,MCrBtBuD,IAASjB,OAAO,kBAAC,EAAD,MAASR,SAAS0B,eAAe,U","file":"static/js/main.1e25fd66.chunk.js","sourcesContent":["import React, { useEffect, useCallback, useRef } from \"react\";\n\n// \\lim\\limits_{x \\to \\infty} \\exp(-x) = 0\n// \\[x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}.\\]\n// \\left[\\begin{array} {rrr} 3.381563 & 3.389113 \\\\\\\\ 4.527875 & 5.854178 \\\\\\\\ 2.655682 & 4.411995 \\\\\\\\ \\vdots & \\vdots \\end{array}\\right]\n\nconst Editor = ({ text, onTextChange }) => {\n  const inputRef = useRef();\n  const handleChange = useCallback(\n    event => {\n      onTextChange(event.currentTarget.value);\n    },\n    [onTextChange]\n  );\n\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, []);\n\n  return (\n    <div className=\"Editor\">\n      <textarea\n        ref={inputRef}\n        placeholder=\"Enter LaTeX math expressions here...\"\n        value={text}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default Editor;\n","import React, { useEffect, useRef } from \"react\";\nimport katex from \"katex\";\n\nconst Renderer = ({ text }) => {\n  const contentRef = useRef();\n\n  useEffect(() => {\n    const el = contentRef.current;\n    const parts = text.split(\"\\n\\n\").filter(p => p.trim());\n\n    // Clear out the last renders.\n    while (el.hasChildNodes()) {\n      el.removeChild(el.childNodes[0]);\n    }\n\n    // Render the new parts.\n    parts.forEach(part => {\n      const partEl = document.createElement(\"div\");\n      partEl.classList.add(\"part\");\n      el.appendChild(partEl);\n\n      try {\n        if (part.startsWith(\"!\")) {\n          throw new Error();\n        }\n\n        katex.render(part, partEl);\n        partEl.classList.add(\"latex-part\");\n      } catch (e) {\n        // This isn't valid LaTeX. Just assume it's regular text.\n        partEl.innerText = part.replace(/^!/, \"\");\n        partEl.classList.add(\"text-part\");\n      }\n    });\n  }, [text]);\n\n  return (\n    <div className=\"Renderer\">\n      <div ref={contentRef} />\n    </div>\n  );\n};\n\nexport default Renderer;\n","import React, { useEffect, useState } from \"react\";\nimport parseUrl from \"url-parse\";\nimport SplitPane from \"react-split-pane\";\nimport Editor from \"components/Editor\";\nimport Renderer from \"components/Renderer\";\n\n//\n\nconst App = () => {\n  const [text, setText] = useState(\"\");\n  const [id] = useState(() => parseUrl(window.location.href, true).query.id);\n\n  useEffect(() => {\n    if (id) {\n      setText(localStorage.getItem(`text:${id}`) || \"\");\n    }\n  }, [id]);\n\n  useEffect(() => {\n    if (id) {\n      localStorage.setItem(`text:${id}`, text);\n    }\n  }, [id, text]);\n\n  return (\n    <SplitPane split=\"vertical\" defaultSize=\"50%\">\n      <Editor text={text} onTextChange={setText} />\n      <Renderer text={text} />\n    </SplitPane>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"../node_modules/katex/dist/katex.min.css\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}