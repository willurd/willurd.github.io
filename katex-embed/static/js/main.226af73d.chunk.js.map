{"version":3,"sources":["components/Editor.js","utils/rendering.js","components/Renderer.js","utils/dom.js","App.js","index.js"],"names":["Editor","text","onTextChange","inputRef","useRef","handleChange","useCallback","event","currentTarget","value","useEffect","current","focus","className","ref","placeholder","onChange","renderText","el","innerText","replace","classList","add","Renderer","contentRef","parts","split","filter","p","trim","hasChildNodes","removeChild","childNodes","removeAllChildren","forEach","part","partEl","container","document","createElement","appendChild","createPartElement","startsWith","katex","render","map","l","join","renderLatex","e","App","useState","setText","parseUrl","window","location","href","query","id","localStorage","getItem","setItem","defaultSize","pane2Style","overflow","ReactDOM","getElementById"],"mappings":"6OAiCeA,EA3BA,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,aAChBC,EAAWC,mBACXC,EAAeC,uBACnB,SAAAC,GACEL,EAAaK,EAAMC,cAAcC,SAEnC,CAACP,IASH,OANAQ,qBAAU,WACJP,EAASQ,SACXR,EAASQ,QAAQC,UAElB,IAGD,yBAAKC,UAAU,UACb,8BACEC,IAAKX,EACLY,YAAY,uCACZN,MAAOR,EACPe,SAAUX,M,gBClBLY,EAAa,SAACC,EAAIjB,GAC7BiB,EAAGC,UAAYlB,EAAKmB,QAAQ,KAAM,IAClCF,EAAGG,UAAUC,IAAI,cC4BJC,EAnCE,SAAC,GAAc,IAAZtB,EAAW,EAAXA,KACZuB,EAAapB,mBA2BnB,OAtBAM,qBAAU,WACR,IAAMQ,EAAKM,EAAWb,QAChBc,EAAQxB,EAAKyB,MAAM,QAAQC,QAAO,SAAAC,GAAC,OAAIA,EAAEC,WCZlB,SAAAX,GAC/B,KAAOA,EAAGY,iBACRZ,EAAGa,YAAYb,EAAGc,WAAW,IDY7BC,CAAkBf,GAGlBO,EAAMS,SAAQ,SAAAC,GACZ,IAAMC,EDhBqB,SAAAC,GAC/B,IAAMD,EAASE,SAASC,cAAc,OAGtC,OAFAH,EAAOf,UAAUC,IAAI,QACrBe,EAAUG,YAAYJ,GACfA,ECYYK,CAAkBvB,GAEjC,GAAIiB,EAAKO,WAAW,KAClBzB,EAAWmB,EAAQD,QAEnB,KDTmB,SAACjB,EAAIjB,GAC9B0C,IAAMC,OACJ3C,EACGyB,MAAM,MAENmB,KAAI,SAAAC,GAAC,OAAIA,EAAI,WACbC,KAAK,MACR7B,GAEFA,EAAGG,UAAUC,IAAI,cCCT0B,CAAYZ,EAAQD,GACpB,MAAOc,GACPhC,EAAWmB,EAAQD,SAIxB,CAAClC,IAGF,yBAAKY,UAAU,YACb,yBAAKC,IAAKU,MEED0B,EA5BH,WAAO,IAAD,EACQC,mBAAS,IADjB,mBACTlD,EADS,KACHmD,EADG,OAEHD,oBAAS,kBAAME,IAASC,OAAOC,SAASC,MAAM,GAAMC,MAAMC,MAAhEA,EAFS,oBAgBhB,OAZAhD,qBAAU,WACJgD,GACFN,EAAQO,aAAaC,QAAb,eAA6BF,KAAS,MAE/C,CAACA,IAEJhD,qBAAU,WACJgD,GACFC,aAAaE,QAAb,eAA6BH,GAAMzD,KAEpC,CAACyD,EAAIzD,IAGN,kBAAC,IAAD,CACEyB,MAAM,WACNoC,YAAY,MACZC,WAAY,CAAEC,SAAU,SAExB,kBAAC,EAAD,CAAQ/D,KAAMA,EAAMC,aAAckD,IAClC,kBAAC,EAAD,CAAUnD,KAAMA,MCzBtBgE,IAASrB,OAAO,kBAAC,EAAD,MAASN,SAAS4B,eAAe,U","file":"static/js/main.226af73d.chunk.js","sourcesContent":["import React, { useEffect, useCallback, useRef } from \"react\";\n\n// \\lim\\limits_{x \\to \\infty} \\exp(-x) = 0\n// \\[x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}.\\]\n// \\left[\\begin{array} {rrr} 3.381563 & 3.389113 \\\\\\\\ 4.527875 & 5.854178 \\\\\\\\ 2.655682 & 4.411995 \\\\\\\\ \\vdots & \\vdots \\end{array}\\right]\n\nconst Editor = ({ text, onTextChange }) => {\n  const inputRef = useRef();\n  const handleChange = useCallback(\n    event => {\n      onTextChange(event.currentTarget.value);\n    },\n    [onTextChange]\n  );\n\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, []);\n\n  return (\n    <div className=\"Editor\">\n      <textarea\n        ref={inputRef}\n        placeholder=\"Enter LaTeX math expressions here...\"\n        value={text}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default Editor;\n","import katex from \"katex\";\n\nexport const createPartElement = container => {\n  const partEl = document.createElement(\"div\");\n  partEl.classList.add(\"part\");\n  container.appendChild(partEl);\n  return partEl;\n};\n\nexport const renderText = (el, text) => {\n  el.innerText = text.replace(/^!/, \"\");\n  el.classList.add(\"text-part\");\n};\n\nexport const renderLatex = (el, text) => {\n  katex.render(\n    text\n      .split(\"\\n\")\n      // Add a newline to each line since we do that anyway.\n      .map(l => l + \" \\\\\\\\\")\n      .join(\"\\n\"),\n    el\n  );\n  el.classList.add(\"latex-part\");\n};\n","import React, { useEffect, useRef } from \"react\";\nimport { removeAllChildren } from \"utils/dom\";\nimport { createPartElement, renderText, renderLatex } from \"utils/rendering\";\n\nconst Renderer = ({ text }) => {\n  const contentRef = useRef();\n\n  // TODO: This is pretty slow for large (e.g. full page) inputs. Try to\n  // cache input parts across renders and only add/remove/modify parts\n  // that change.\n  useEffect(() => {\n    const el = contentRef.current;\n    const parts = text.split(\"\\n\\n\").filter(p => p.trim());\n\n    removeAllChildren(el);\n\n    // Render the new parts.\n    parts.forEach(part => {\n      const partEl = createPartElement(el);\n\n      if (part.startsWith(\"!\")) {\n        renderText(partEl, part);\n      } else {\n        try {\n          renderLatex(partEl, part);\n        } catch (e) {\n          renderText(partEl, part);\n        }\n      }\n    });\n  }, [text]);\n\n  return (\n    <div className=\"Renderer\">\n      <div ref={contentRef} />\n    </div>\n  );\n};\n\nexport default Renderer;\n","export const removeAllChildren = el => {\n  while (el.hasChildNodes()) {\n    el.removeChild(el.childNodes[0]);\n  }\n};\n","import React, { useEffect, useState } from \"react\";\nimport parseUrl from \"url-parse\";\nimport SplitPane from \"react-split-pane\";\nimport Editor from \"components/Editor\";\nimport Renderer from \"components/Renderer\";\n\n//\n\nconst App = () => {\n  const [text, setText] = useState(\"\");\n  const [id] = useState(() => parseUrl(window.location.href, true).query.id);\n\n  useEffect(() => {\n    if (id) {\n      setText(localStorage.getItem(`text:${id}`) || \"\");\n    }\n  }, [id]);\n\n  useEffect(() => {\n    if (id) {\n      localStorage.setItem(`text:${id}`, text);\n    }\n  }, [id, text]);\n\n  return (\n    <SplitPane\n      split=\"vertical\"\n      defaultSize=\"50%\"\n      pane2Style={{ overflow: \"auto\" }}\n    >\n      <Editor text={text} onTextChange={setText} />\n      <Renderer text={text} />\n    </SplitPane>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"../node_modules/katex/dist/katex.min.css\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}